#!/usr/bin/env bash
set -euo pipefail

# Text helper colors
txtred='\e[0;31m' # Red
txtgrn='\e[0;32m' # Green
clroff='\e[0m'    # Color reset

#
## Utility functions
#
ensure() {
    errors=""
    verify=$1 && shift
    for verifiable in "$@"; do
        $verify $verifiable >/dev/null \
            || errors+="${txtred}Mimipass requires \`$verify $verifiable\` to return true.\n${clroff}"
    done

    [ -z "$errors" ] || { echo -e "${errors%\\n}" && exit 1 ;}
}

green_echo() { echo -e "${txtgrn}$@${clroff}" ;}
red_echo() { echo -e "${txtred}$@${clroff}" ;}

# higher order functions in shell! ;p
ensure-env() { ensure "test -v" "$@" ;}
ensure-programs() { ensure which "$@" ;}

# Verify environment
ensure-programs gpg openssl gpg-agent tr xargs
ensure-env MIMIPASS_HOME MIMIPASS_RECIPIENT

#
## Password recovery
#
mimipass-list() {
    (ls $MIMIPASS_HOME/*.enc >/dev/null 2>&1) \
        || { red_echo 'No passwords available'; return 1 ;}

    green_echo 'Mimipass available passwords:' >&2
    ls -1 $MIMIPASS_HOME/*.enc \
        | xargs -I {} -n1 basename {} .enc \
        | xargs -I{} -n1 echo "* {}"
}

mimipass-get() {
    passwd_name=$1
    passwd_file=$MIMIPASS_HOME/$passwd_name.enc

    if [ -f $passwd_file ]; then
        gpg --use-agent -r $MIMIPASS_RECIPIENT -d $passwd_file
    else
        red_echo "Couldn't find [ ${passwd_name} ] in the passwd list" >&2
        return 1
    fi
}

mimipass-xcopy() {
    passwd_name=$1
    ensure-programs xclip

    mimipass-get $passwd_name | xclip -i -selection clipboard \
        && green_echo "Password [ $passwd_name ] sent to clipboard :)" >&2
}

#
## Password set and generation
#
mimipass-set() {
    passwd_name=$1
    passwd_file=$MIMIPASS_HOME/$passwd_name.enc

    green_echo "Type the text. Press Return and then C-d when done." >&2
    gpg --yes -r $MIMIPASS_RECIPIENT -o $passwd_file -e

    green_echo "Done!" >&2
}
mimipass-create() {
    size=${1:-64}

    openssl rand -base64 128 \
        | tr -d '\n' \
        | cut -c -$size
}
mimipass-create-set() {
    passwd_name=$1

    mimipass-create | mimipass-set $passwd_name 2>/dev/null
    green_echo "Done!" >&2
}

#
## Secret key import and exporting
#
mimipass-import() {
    gpg --import $MIMIPASS_HOME/publickey.txt
    gpg --import $MIMIPASS_HOME/privatekey.txt

    green_echo "Done!" >&2
}

mimipass-export() {
    gpg --export            -a -o $MIMIPASS_HOME/publickey.txt $MIMIPASS_RECIPIENT
    gpg --export-secret-key -a -o $MIMIPASS_HOME/privatekey.txt $MIMIPASS_RECIPIENT

    green_echo "Done!" >&2
}

# Invoke!
cmd=$1 && shift
mimipass-$cmd $@
